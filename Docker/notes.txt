gerer deployer services (serveurs) dans conteneurs
utilisé principalement par les devops

conteneur = ensemble de programmes utilisés pour déployer un service
ex php, mysql, nginx/apache/ubuntu

images = modèle qui contient les infos pour créer un conteneur
image -> conteneur ~= classe -> instance

docker hub = site pour rechercher une image
dockerfile = script pour créer une image
docker-compose.yml = fichier pour créer une configuration de conteneurs reliés 

intêrets de docker = gère automatiquement les requêtes et le transfert d'infos pour plusieurs sites, test de versions de logiciels, compatibilité de conteneurs sur plusieurs os

installation :
verifier virtualisation
fonctionalités windows : activer hyper-v
https://docs.docker.com/get-docker/
windows subsystem for linux


> cmd
créer conteneur hellow world: docker run hello-world
lister conteneurs : docker ps -a / docker container ls -a
lister images : docker images / docker image ls
supprimer container : docker rm [ID] [ID2] (ou premier caractères)
supprimer image : docker rmi [ID] (d'abord supprimer containeurs reliés)

lancer container : docker start [ID] (-ai pour entrer dans le container)
stop : docker stop [ID]

entrer container : docker exec -it [ID] bash

dans container :
lister : ls
creer fichier : touch test.js
sortir : exit

mapper dossier local to docker (cmd dans le dossier) : docker run -it --rm -v test:/test-container ubuntu

docker run -itv test:/test-container ubuntu:18.04
docker run -it -v [ABS-PATH]:test-container ubuntu:18.04

installer packet dans conteneur : apt-get install -y vim
maj conteneur : apt-update

docker volume create (volume)
docker volume ls
docker run -itv (volume):/bin ubuntu:18.04

apt-get install iputils-ping
apt-get install iproute2
>ip -c a

docker network ls

docker build -t [nom-image]:[version] .
docker run -d -p [port]:80 [nom-image]:[version]